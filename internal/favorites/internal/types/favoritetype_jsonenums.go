// generated by jsonenums -tprefix=false -transform=snake -type=FavoriteType; DO NOT EDIT
package types

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
)

func init() {
	// stubs for imports
	_ = json.Delim('s')
	_ = driver.Int32

}

var ErrFavoriteTypeInvalid = errors.New("FavoriteType is invalid")

func init() {
	var v FavoriteType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_FavoriteTypeNameToValue = map[string]FavoriteType{
			interface{}(FavoriteTypeSale).(fmt.Stringer).String():      FavoriteTypeSale,
			interface{}(FavoriteTypeAssetPair).(fmt.Stringer).String(): FavoriteTypeAssetPair,
			interface{}(FavoriteTypeSettings).(fmt.Stringer).String():  FavoriteTypeSettings,
		}
	}
}

var _FavoriteTypeNameToValue = map[string]FavoriteType{
	"sale":       FavoriteTypeSale,
	"asset_pair": FavoriteTypeAssetPair,
	"settings":   FavoriteTypeSettings,
}

var _FavoriteTypeValueToName = map[FavoriteType]string{
	FavoriteTypeSale:      "sale",
	FavoriteTypeAssetPair: "asset_pair",
	FavoriteTypeSettings:  "settings",
}

// String is generated so FavoriteType satisfies fmt.Stringer.
func (r FavoriteType) String() string {
	s, ok := _FavoriteTypeValueToName[r]
	if !ok {
		return fmt.Sprintf("FavoriteType(%d)", r)
	}
	return s
}

// Validate verifies that value is predefined for FavoriteType.
func (r FavoriteType) Validate() error {
	_, ok := _FavoriteTypeValueToName[r]
	if !ok {
		return ErrFavoriteTypeInvalid
	}
	return nil
}

// MarshalJSON is generated so FavoriteType satisfies json.Marshaler.
func (r FavoriteType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _FavoriteTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid FavoriteType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so FavoriteType satisfies json.Unmarshaler.
func (r *FavoriteType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FavoriteType should be a string, got %s", data)
	}
	v, ok := _FavoriteTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid FavoriteType %q", s)
	}
	*r = v
	return nil
}

func (t *FavoriteType) Scan(src interface{}) error {
	i, ok := src.(int64)
	if !ok {
		return fmt.Errorf("can't scan from %T", src)
	}
	*t = FavoriteType(i)
	return nil
}

func (t FavoriteType) Value() (driver.Value, error) {
	return int64(t), nil
}
