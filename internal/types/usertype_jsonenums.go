// generated by jsonenums -type=UserType -tprefix=false -transform=snake; DO NOT EDIT
package types

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
)

func init() {
	// stubs for imports
	_ = json.Delim('s')
	_ = driver.Int32

}

var ErrUserTypeInvalid = errors.New("UserType is invalid")

func init() {
	var v UserType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_UserTypeNameToValue = map[string]UserType{
			interface{}(UserTypeNotVerified).(fmt.Stringer).String(): UserTypeNotVerified,
			interface{}(UserTypeSyndicate).(fmt.Stringer).String():   UserTypeSyndicate,
			interface{}(UserTypeGeneral).(fmt.Stringer).String():     UserTypeGeneral,
		}
	}
}

var _UserTypeNameToValue = map[string]UserType{
	"not_verified": UserTypeNotVerified,
	"syndicate":    UserTypeSyndicate,
	"general":      UserTypeGeneral,
}

var _UserTypeValueToName = map[UserType]string{
	UserTypeNotVerified: "not_verified",
	UserTypeSyndicate:   "syndicate",
	UserTypeGeneral:     "general",
}

// String is generated so UserType satisfies fmt.Stringer.
func (r UserType) String() string {
	s, ok := _UserTypeValueToName[r]
	if !ok {
		return fmt.Sprintf("UserType(%d)", r)
	}
	return s
}

// Validate verifies that value is predefined for UserType.
func (r UserType) Validate() error {
	_, ok := _UserTypeValueToName[r]
	if !ok {
		return ErrUserTypeInvalid
	}
	return nil
}

// MarshalJSON is generated so UserType satisfies json.Marshaler.
func (r UserType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _UserTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid UserType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so UserType satisfies json.Unmarshaler.
func (r *UserType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("UserType should be a string, got %s", data)
	}
	v, ok := _UserTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid UserType %q", s)
	}
	*r = v
	return nil
}

func (t *UserType) Scan(src interface{}) error {
	i, ok := src.(int64)
	if !ok {
		return fmt.Errorf("can't scan from %T", src)
	}
	*t = UserType(i)
	return nil
}

func (t UserType) Value() (driver.Value, error) {
	return int64(t), nil
}
