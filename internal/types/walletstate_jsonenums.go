// generated by jsonenums -type=WalletState -tprefix=false -transform=snake; DO NOT EDIT
package types

import (
	"encoding/json"
	"errors"
	"fmt"
)

func init() {
	// stub usage of json for situation when
	// (Un)MarshalJSON methods will be omitted
	_ = json.Delim('s')
}

var ErrWalletStateInvalid = errors.New("WalletState is invalid")

func init() {
	var v WalletState
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_WalletStateNameToValue = map[string]WalletState{
			interface{}(WalletStateNotVerified).(fmt.Stringer).String(): WalletStateNotVerified,
			interface{}(WalletStateVerified).(fmt.Stringer).String():    WalletStateVerified,
		}
	}
}

var _WalletStateNameToValue = map[string]WalletState{
	"not_verified": WalletStateNotVerified,
	"verified":     WalletStateVerified,
}

var _WalletStateValueToName = map[WalletState]string{
	WalletStateNotVerified: "not_verified",
	WalletStateVerified:    "verified",
}

// String is generated so WalletState satisfies fmt.Stringer.
func (r WalletState) String() string {
	s, ok := _WalletStateValueToName[r]
	if !ok {
		return fmt.Sprintf("WalletState(%d)", r)
	}
	return s
}

// Validate verifies that value is predefined for WalletState.
func (r WalletState) Validate() error {
	_, ok := _WalletStateValueToName[r]
	if !ok {
		return ErrWalletStateInvalid
	}
	return nil
}

// MarshalJSON is generated so WalletState satisfies json.Marshaler.
func (r WalletState) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _WalletStateValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid WalletState: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so WalletState satisfies json.Unmarshaler.
func (r *WalletState) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("WalletState should be a string, got %s", data)
	}
	v, ok := _WalletStateNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid WalletState %q", s)
	}
	*r = v
	return nil
}
