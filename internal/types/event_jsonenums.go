// generated by jsonenums -tprefix=false -transform=snake -type=Event; DO NOT EDIT
package types

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
)

func init() {
	// stubs for imports
	_ = json.Delim('s')
	_ = driver.Int32

}

var ErrEventInvalid = errors.New("Event is invalid")

func init() {
	var v Event
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_EventNameToValue = map[string]Event{
			interface{}(EventSignUpForNewsletter).(fmt.Stringer).String():    EventSignUpForNewsletter,
			interface{}(EventReadSwarmBasics).(fmt.Stringer).String():        EventReadSwarmBasics,
			interface{}(EventViewDownloadWhitepaper).(fmt.Stringer).String(): EventViewDownloadWhitepaper,
			interface{}(EventWatchedYtVideo).(fmt.Stringer).String():         EventWatchedYtVideo,
			interface{}(EventVisitedFaq).(fmt.Stringer).String():             EventVisitedFaq,
			interface{}(EventClickedLoginButton).(fmt.Stringer).String():     EventClickedLoginButton,
			interface{}(EventRegister).(fmt.Stringer).String():               EventRegister,
			interface{}(EventVerifyEmail).(fmt.Stringer).String():            EventVerifyEmail,
			interface{}(EventFirstLogin).(fmt.Stringer).String():             EventFirstLogin,
			interface{}(EventLogin).(fmt.Stringer).String():                  EventLogin,
			interface{}(EventLogout).(fmt.Stringer).String():                 EventLogout,
			interface{}(EventBrowseIo).(fmt.Stringer).String():               EventBrowseIo,
			interface{}(EventViewYtVideo).(fmt.Stringer).String():            EventViewYtVideo,
			interface{}(EventViewedASpecificTab).(fmt.Stringer).String():     EventViewedASpecificTab,
			interface{}(EventUnsubscribe).(fmt.Stringer).String():            EventUnsubscribe,
			interface{}(EventVoteInAnIo).(fmt.Stringer).String():             EventVoteInAnIo,
			interface{}(EventEnableTFA).(fmt.Stringer).String():              EventEnableTFA,
			interface{}(EventDisableTFA).(fmt.Stringer).String():             EventDisableTFA,
		}
	}
}

var _EventNameToValue = map[string]Event{
	"sign_up_for_newsletter":   EventSignUpForNewsletter,
	"read_swarm_basics":        EventReadSwarmBasics,
	"view_download_whitepaper": EventViewDownloadWhitepaper,
	"watched_yt_video":         EventWatchedYtVideo,
	"visited_faq":              EventVisitedFaq,
	"clicked_login_button":     EventClickedLoginButton,
	"register":                 EventRegister,
	"verify_email":             EventVerifyEmail,
	"first_login":              EventFirstLogin,
	"login":                    EventLogin,
	"logout":                   EventLogout,
	"browse_io":                EventBrowseIo,
	"view_yt_video":            EventViewYtVideo,
	"viewed_a_specific_tab":    EventViewedASpecificTab,
	"unsubscribe":              EventUnsubscribe,
	"vote_in_an_io":            EventVoteInAnIo,
	"enable_tfa":               EventEnableTFA,
	"disable_tfa":              EventDisableTFA,
}

var _EventValueToName = map[Event]string{
	EventSignUpForNewsletter:    "sign_up_for_newsletter",
	EventReadSwarmBasics:        "read_swarm_basics",
	EventViewDownloadWhitepaper: "view_download_whitepaper",
	EventWatchedYtVideo:         "watched_yt_video",
	EventVisitedFaq:             "visited_faq",
	EventClickedLoginButton:     "clicked_login_button",
	EventRegister:               "register",
	EventVerifyEmail:            "verify_email",
	EventFirstLogin:             "first_login",
	EventLogin:                  "login",
	EventLogout:                 "logout",
	EventBrowseIo:               "browse_io",
	EventViewYtVideo:            "view_yt_video",
	EventViewedASpecificTab:     "viewed_a_specific_tab",
	EventUnsubscribe:            "unsubscribe",
	EventVoteInAnIo:             "vote_in_an_io",
	EventEnableTFA:              "enable_tfa",
	EventDisableTFA:             "disable_tfa",
}

// String is generated so Event satisfies fmt.Stringer.
func (r Event) String() string {
	s, ok := _EventValueToName[r]
	if !ok {
		return fmt.Sprintf("Event(%d)", r)
	}
	return s
}

// Validate verifies that value is predefined for Event.
func (r Event) Validate() error {
	_, ok := _EventValueToName[r]
	if !ok {
		return ErrEventInvalid
	}
	return nil
}

// MarshalJSON is generated so Event satisfies json.Marshaler.
func (r Event) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _EventValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid Event: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so Event satisfies json.Unmarshaler.
func (r *Event) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Event should be a string, got %s", data)
	}
	v, ok := _EventNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid Event %q", s)
	}
	*r = v
	return nil
}

func (t *Event) Scan(src interface{}) error {
	i, ok := src.(int64)
	if !ok {
		return fmt.Errorf("can't scan from %T", src)
	}
	*t = Event(i)
	return nil
}

func (t Event) Value() (driver.Value, error) {
	return int64(t), nil
}
