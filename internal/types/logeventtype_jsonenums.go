// generated by jsonenums -tprefix=false -transform=snake -type=LogEventType; DO NOT EDIT
package types

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
)

func init() {
	// stubs for imports
	_ = json.Delim('s')
	_ = driver.Int32

}

var ErrLogEventTypeInvalid = errors.New("LogEventType is invalid")

func init() {
	var v LogEventType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_LogEventTypeNameToValue = map[string]LogEventType{
			interface{}(LogEventTypeUserCreated).(fmt.Stringer).String():        LogEventTypeUserCreated,
			interface{}(LogEventTypeSuccessfulTFA).(fmt.Stringer).String():      LogEventTypeSuccessfulTFA,
			interface{}(LogEventTypeUnsuccessfulTFA).(fmt.Stringer).String():    LogEventTypeUnsuccessfulTFA,
			interface{}(LogEventTypeCreateTFABackend).(fmt.Stringer).String():   LogEventTypeCreateTFABackend,
			interface{}(LogEventTypeUpdateWalletFactor).(fmt.Stringer).String(): LogEventTypeUpdateWalletFactor,
			interface{}(LogEventTypeDeleteWalletFactor).(fmt.Stringer).String(): LogEventTypeDeleteWalletFactor,
			interface{}(LogEventTypeLoginSuccessful).(fmt.Stringer).String():    LogEventTypeLoginSuccessful,
		}
	}
}

var _LogEventTypeNameToValue = map[string]LogEventType{
	"user_created":         LogEventTypeUserCreated,
	"successful_tfa":       LogEventTypeSuccessfulTFA,
	"unsuccessful_tfa":     LogEventTypeUnsuccessfulTFA,
	"create_tfa_backend":   LogEventTypeCreateTFABackend,
	"update_wallet_factor": LogEventTypeUpdateWalletFactor,
	"delete_wallet_factor": LogEventTypeDeleteWalletFactor,
	"login_successful":     LogEventTypeLoginSuccessful,
}

var _LogEventTypeValueToName = map[LogEventType]string{
	LogEventTypeUserCreated:        "user_created",
	LogEventTypeSuccessfulTFA:      "successful_tfa",
	LogEventTypeUnsuccessfulTFA:    "unsuccessful_tfa",
	LogEventTypeCreateTFABackend:   "create_tfa_backend",
	LogEventTypeUpdateWalletFactor: "update_wallet_factor",
	LogEventTypeDeleteWalletFactor: "delete_wallet_factor",
	LogEventTypeLoginSuccessful:    "login_successful",
}

// String is generated so LogEventType satisfies fmt.Stringer.
func (r LogEventType) String() string {
	s, ok := _LogEventTypeValueToName[r]
	if !ok {
		return fmt.Sprintf("LogEventType(%d)", r)
	}
	return s
}

// Validate verifies that value is predefined for LogEventType.
func (r LogEventType) Validate() error {
	_, ok := _LogEventTypeValueToName[r]
	if !ok {
		return ErrLogEventTypeInvalid
	}
	return nil
}

// MarshalJSON is generated so LogEventType satisfies json.Marshaler.
func (r LogEventType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _LogEventTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid LogEventType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so LogEventType satisfies json.Unmarshaler.
func (r *LogEventType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("LogEventType should be a string, got %s", data)
	}
	v, ok := _LogEventTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid LogEventType %q", s)
	}
	*r = v
	return nil
}

func (t *LogEventType) Scan(src interface{}) error {
	i, ok := src.(int64)
	if !ok {
		return fmt.Errorf("can't scan from %T", src)
	}
	*t = LogEventType(i)
	return nil
}

func (t LogEventType) Value() (driver.Value, error) {
	return int64(t), nil
}
