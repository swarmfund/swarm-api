// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package hose

import "sync"

type UserCallback func(UserEvent)
type UserDispatch func(UserEvent)

type UserBus struct {
	*sync.RWMutex
	callbacks []UserCallback
}

func NewUserBus() *UserBus {
	return &UserBus{
		&sync.RWMutex{},
		make([]UserCallback, 0),
	}
}

func (b *UserBus) Subscribe(cb UserCallback) *UserBus {
	b.Lock()
	defer b.Unlock()
	b.callbacks = append(b.callbacks, cb)
	return b
}

func (b *UserBus) Dispatch(event UserEvent) {
	b.Lock()
	defer b.Unlock()

	for _, cb := range b.callbacks {
		func() {
			defer func() {
				// todo recover
			}()
			cb(event)
		}()
	}
}
