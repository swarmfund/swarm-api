// This file was automatically generated by genny.
// Any changes will be lost if this file is regenerated.
// see https://github.com/cheekybits/genny

package hose

import "sync"

type TransactionCallback func(TransactionEvent)
type TransactionDispatch func(TransactionEvent)

type TransactionBus struct {
	*sync.RWMutex
	callbacks []TransactionCallback
}

func NewTransactionBus() *TransactionBus {
	return &TransactionBus{
		&sync.RWMutex{},
		make([]TransactionCallback, 0),
	}
}

func (b *TransactionBus) Subscribe(cb TransactionCallback) *TransactionBus {
	b.Lock()
	defer b.Unlock()
	b.callbacks = append(b.callbacks, cb)
	return b
}

func (b *TransactionBus) Dispatch(event TransactionEvent) {
	b.Lock()
	defer b.Unlock()

	for _, cb := range b.callbacks {
		func() {
			defer func() {
				// todo recover
			}()
			cb(event)
		}()
	}
}
