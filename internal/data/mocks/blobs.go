// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import data "gitlab.com/swarmfund/api/internal/data"
import mock "github.com/stretchr/testify/mock"
import types "gitlab.com/swarmfund/api/internal/types"

// Blobs is an autogenerated mock type for the Blobs type
type Blobs struct {
	mock.Mock
}

// ByOwner provides a mock function with given fields: _a0
func (_m *Blobs) ByOwner(_a0 types.Address) data.Blobs {
	ret := _m.Called(_a0)

	var r0 data.Blobs
	if rf, ok := ret.Get(0).(func(types.Address) data.Blobs); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data.Blobs)
		}
	}

	return r0
}

// ByRelationships provides a mock function with given fields: _a0
func (_m *Blobs) ByRelationships(_a0 map[string]string) data.Blobs {
	ret := _m.Called(_a0)

	var r0 data.Blobs
	if rf, ok := ret.Get(0).(func(map[string]string) data.Blobs); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data.Blobs)
		}
	}

	return r0
}

// ByType provides a mock function with given fields: _a0
func (_m *Blobs) ByType(_a0 types.BlobType) data.Blobs {
	ret := _m.Called(_a0)

	var r0 data.Blobs
	if rf, ok := ret.Get(0).(func(types.BlobType) data.Blobs); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data.Blobs)
		}
	}

	return r0
}

// Create provides a mock function with given fields: address, blob
func (_m *Blobs) Create(address *types.Address, blob *types.Blob) error {
	ret := _m.Called(address, blob)

	var r0 error
	if rf, ok := ret.Get(0).(func(*types.Address, *types.Blob) error); ok {
		r0 = rf(address, blob)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0
func (_m *Blobs) Delete(_a0 ...types.Blob) error {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...types.Blob) error); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ExcludeDeleted provides a mock function with given fields:
func (_m *Blobs) ExcludeDeleted() data.Blobs {
	ret := _m.Called()

	var r0 data.Blobs
	if rf, ok := ret.Get(0).(func() data.Blobs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data.Blobs)
		}
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *Blobs) Get(id string) (*types.Blob, error) {
	ret := _m.Called(id)

	var r0 *types.Blob
	if rf, ok := ret.Get(0).(func(string) *types.Blob); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Blob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkDeleted provides a mock function with given fields: id
func (_m *Blobs) MarkDeleted(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// New provides a mock function with given fields:
func (_m *Blobs) New() data.Blobs {
	ret := _m.Called()

	var r0 data.Blobs
	if rf, ok := ret.Get(0).(func() data.Blobs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data.Blobs)
		}
	}

	return r0
}

// Select provides a mock function with given fields:
func (_m *Blobs) Select() ([]types.Blob, error) {
	ret := _m.Called()

	var r0 []types.Blob
	if rf, ok := ret.Get(0).(func() []types.Blob); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Blob)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transaction provides a mock function with given fields: fn
func (_m *Blobs) Transaction(fn func(data.Blobs) error) error {
	ret := _m.Called(fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(data.Blobs) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
