// Code generated by mockery v1.0.0
package mocks

import api "gitlab.com/swarmfund/api/db2/api"
import mock "github.com/stretchr/testify/mock"
import tfa "gitlab.com/swarmfund/api/tfa"

// TFAQI is an autogenerated mock type for the TFAQI type
type TFAQI struct {
	mock.Mock
}

// Backend provides a mock function with given fields: id
func (_m *TFAQI) Backend(id int64) (*api.Backend, error) {
	ret := _m.Called(id)

	var r0 *api.Backend
	if rf, ok := ret.Get(0).(func(int64) *api.Backend); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.Backend)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Backends provides a mock function with given fields: walletID
func (_m *TFAQI) Backends(walletID string) ([]api.Backend, error) {
	ret := _m.Called(walletID)

	var r0 []api.Backend
	if rf, ok := ret.Get(0).(func(string) []api.Backend); ok {
		r0 = rf(walletID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]api.Backend)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(walletID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Consume provides a mock function with given fields: token
func (_m *TFAQI) Consume(token string) (bool, error) {
	ret := _m.Called(token)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0
func (_m *TFAQI) Create(_a0 *api.TFA) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*api.TFA) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateBackend provides a mock function with given fields: walletID, backend
func (_m *TFAQI) CreateBackend(walletID string, backend tfa.Backend) (*int64, error) {
	ret := _m.Called(walletID, backend)

	var r0 *int64
	if rf, ok := ret.Get(0).(func(string, tfa.Backend) *int64); ok {
		r0 = rf(walletID, backend)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, tfa.Backend) error); ok {
		r1 = rf(walletID, backend)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackend provides a mock function with given fields: id
func (_m *TFAQI) DeleteBackend(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBackends provides a mock function with given fields: wallet
func (_m *TFAQI) DeleteBackends(wallet *api.Wallet) error {
	ret := _m.Called(wallet)

	var r0 error
	if rf, ok := ret.Get(0).(func(*api.Wallet) error); ok {
		r0 = rf(wallet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: token
func (_m *TFAQI) Get(token string) (*api.TFA, error) {
	ret := _m.Called(token)

	var r0 *api.TFA
	if rf, ok := ret.Get(0).(func(string) *api.TFA); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.TFA)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// New provides a mock function with given fields:
func (_m *TFAQI) New() api.TFAQI {
	ret := _m.Called()

	var r0 api.TFAQI
	if rf, ok := ret.Get(0).(func() api.TFAQI); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.TFAQI)
		}
	}

	return r0
}

// SetBackendPriority provides a mock function with given fields: id, priority
func (_m *TFAQI) SetBackendPriority(id int64, priority int) error {
	ret := _m.Called(id, priority)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int) error); ok {
		r0 = rf(id, priority)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Verify provides a mock function with given fields: token
func (_m *TFAQI) Verify(token string) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
